/*
 * Copyright (c) 2019 sep.gg <seputaes@sep.gg>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package gg.sep.avenue.router;

import java.lang.annotation.Annotation;
import java.lang.reflect.Method;
import java.lang.reflect.Parameter;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Base64;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import com.amazonaws.serverless.proxy.model.AwsProxyRequest;
import com.amazonaws.serverless.proxy.model.AwsProxyResponse;
import lombok.Builder;
import lombok.Getter;

import gg.sep.avenue.router.converter.TokenConverter;

/**
 * Route represents a singular route which is capable of handling an HTTP request.
 *
 * <p>Routes are declared as methods inside of a {@link RouteController} class and
 * are annotated with one of the HTTP method annotations
 * ({@link GET}, {@link POST}, {@link PATCH}, etc) in order to designate
 * which HTTP request paths and HTTP methods should be handled by that route.
 *
 * <p>A {@link Route} must consist of a {@link RouteRequestMethod}, the actual {@link Method}
 * which handles the request, the {@link RouteController} which holds the {@link Method},
 * a mapping of {@code pathParameters} which maps any tokens in the path to the
 * {@link TokenConverter} responsible for handling that token value, and the
 * {@link Pattern} which can be used to identify whether the route handles a particular
 * HTTP Request.
 *
 * <p>The {@code pathParameters} can be built from the Route's path (with tokens)
 * by using {@link RoutePathParser#buildPathParameters(String)}. These routes are
 * generate automatically generated by each {@link RouteController} in their own
 * {@link RouteController#getRoutes()}, which is implemented in
 * {@link AbstractRouteController}
 */
@Builder
@Getter
public class Route {
    private RouteRequestMethod routeRequestMethod;
    private Method method;
    private RouteController controller;
    private Map<String, TokenConverter> pathParameters;
    private Pattern pattern;

    /**
     * Invoke the route using the Lambda' request which triggered the route.
     *
     * @param request The Lambda proxy request.
     * @return The response to send back to the Lambda's output stream.
     * @throws Exception Exception thrown if invoking the Java method fails.
     */
    public AwsProxyResponse invoke(final AwsProxyRequest request) throws Exception {
        final Object[] invokeArgs = buildArgs(request);
        final Object returnVal = method.invoke(controller, invokeArgs);
        if (returnVal instanceof AwsProxyResponse) {
            return (AwsProxyResponse) returnVal;
        }
        throw new IllegalStateException(
            String.format("Expected AwsProxyResponse from method invocation. method=%s, returnVal=%s",
                method, returnVal));
    }

    /**
     * Indicates whether this route is valid for handling the specified {@link AwsProxyRequest}.
     *
     * @param request The request to check if it is handled by this route.
     * @return Returns {@code true} if this route handles the request, otherwise {@code false}.
     */
    public boolean handlesRequest(final AwsProxyRequest request) {
        return methodMatches(request) && pathMatches(request);
    }

    /**
     * Checks whether the request's HTTP method matches this route's mapped annotation method.
     * @param request The request to check.
     * @return Returns {@code true} if the request's HTTP method matches this route's mapped annotation method,
     *         otherwise {@code false}.
     */
    private boolean methodMatches(final AwsProxyRequest request) {
        return routeRequestMethod.equals(RouteRequestMethod.valueOf(request.getHttpMethod()));
    }

    /**
     * Checks whether the request's path matches this route's path pattern.
     * @param request The request to check.
     * @return Returns {@code true} if the request's path matches the route's path pattern.
     */
    private boolean pathMatches(final AwsProxyRequest request) {
        return pattern.matcher(request.getPath()).matches();
    }

    /**
     * Builds an array of arguments to be passed in as parameters to the route's method
     * given the request.
     *
     * @param request The request for which to build arguments.
     * @return An object array to be passed into the {@link Method#invoke(Object, Object...)} method.
     */
    private Object[] buildArgs(final AwsProxyRequest request) {
        final List<Parameter> parameters = new ArrayList<>();
        Collections.addAll(parameters, method.getParameters());
        final List<Object> argsList = new ArrayList<>();

        if (requestIsFirstParameter(parameters)) {
            argsList.add(request);
            parameters.remove(0);
        }

        // parse the remaining parameters
        parameters.forEach(p -> this.addParameterToArgs(p, request, argsList));
        return argsList.toArray();
    }

    /**
     * Checks whether {@link AwsProxyRequest} is the first parameter in a
     * method's signature, indicating that the raw request should be passed
     * in as the first parameter.
     * @param parameters List of parameters on the method, in declaration order.
     * @return Returns {@code true} if the method's first parameter is type {@link AwsProxyRequest}.
     */
    private boolean requestIsFirstParameter(final List<Parameter> parameters) {
        return parameters.size() > 0 && parameters.get(0).getType().equals(AwsProxyRequest.class);
    }

    /**
     * Given an {@code argsList}, parses each parameter's value off of the Lambda request
     * and places it into the {@code argsList}, which can then be used to pass in as an object array
     * of arguments to the method's invoke.
     *
     * @param parameter The parameter to parse.
     * @param request The Lambda request which contains the data that we be passed to the parameter.
     * @param argsList List that will be used to append the parameter's value.
     */
    private void addParameterToArgs(final Parameter parameter, final AwsProxyRequest request, final List<Object> argsList) {
        final Annotation[] annotations = parameter.getAnnotations();
        // route parameters (excluding Request) must have exactly 1 annotation
        // in order to safely invoke it
        if (annotations.length != 1) {
            throw new IllegalStateException("Route parameters must have exactly 1 annotation");
        }
        final Annotation annotation = annotations[0];

        final Class<? extends Annotation> type = annotation.annotationType();

        if (type.equals(Query.class)) {
            final String value = RouterUtils.getAnnotationField(annotation, "value");
            final String query = request.getMultiValueQueryStringParameters().getFirst(value);
            argsList.add(query);
        } else if (type.equals(Header.class)) {
            final String value = RouterUtils.getAnnotationField(annotation, "value");
            final String headerValue = request.getMultiValueHeaders().getFirst(value);
            argsList.add(headerValue);

        } else if (type.equals(Path.class)) {
            final String value = RouterUtils.getAnnotationField(annotation, "value");
            final TokenConverter tokenConverter = pathParameters.get(value);
            if (tokenConverter == null) {
                throw new IllegalStateException("Unknown token for Path parameter: " + value);
            }
            final Matcher matcher = pattern.matcher(request.getPath());
            matcher.find(0); // matches the whole string, no repeats
            final String tokenValue = matcher.group(value);
            argsList.add(tokenConverter.fromURLPath(tokenValue));
        } else if (type.equals(Body.class)) {
            final String bodyValue = request.getBody();

            if (request.isBase64Encoded()) {
                final byte[] bytes = Base64.getDecoder().decode(bodyValue.getBytes(StandardCharsets.UTF_8));
                argsList.add(bytes);
            } else {
                argsList.add(bodyValue);
            }
        } else {
            throw new IllegalStateException("Unknown route parameter annotation: " + type);
        }
    }

    /**
     * Checks whether the route's are equal to each other.
     *
     * A route is equal to another route if the {@link RouteRequestMethod} and {@link Pattern} are both equal.
     * @param other The other object/route to compare to this route.
     * @return Returns {@code true} if the other route's {@link RouteRequestMethod} and {@link Pattern}
     *         match this route's values.
     */
    @Override
    public boolean equals(final Object other) {
        if (!(other instanceof Route)) {
            return false;
        }
        final Route otherRoute = (Route) other;
        return routeRequestMethod.equals(otherRoute.getRouteRequestMethod()) &&
            pattern.pattern().equals(otherRoute.getPattern().pattern());
    }

    /**
     * Returns the joint hash code for the route's {@link RouteRequestMethod} and {@link Pattern}.
     * @return The joint hash code for the route's {@link RouteRequestMethod} and {@link Pattern}.
     */
    @Override
    public int hashCode() {
        return Objects.hash(routeRequestMethod, pattern.pattern());
    }
}
